#!/usr/scripts/env python
import os
import gzip
import unittest
import filecmp
from pyBioInfo.IO.File import GtfFile, GtfRecord, GtfTranscript, GtfTranscriptBuilder, GtfGene, GtfGeneBuilder

"""
SAMPLE GENES:

chr1
-------------------
lncRNA
-------------------
ENSG00000288531.1
ENSG00000230368.2
-------------------
protein_coding
-------------------
ENSG00000162571.14
ENSG00000186891.14
-------------------

chr2
-------------------
lncRNA
-------------------
ENSG00000223751.1
ENSG00000237667.7
-------------------
protein_coding
-------------------
ENSG00000143727.16
ENSG00000189292.16
-------------------

chr3
-------------------
lncRNA
-------------------
ENSG00000287140.1
ENSG00000234661.2
-------------------
protein_coding
-------------------
ENSG00000182533.7
ENSG00000180914.11
-------------------

The test GTF file was generated by following commands:

wget ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_37/gencode.v37.annotation.gtf.gz
gunzip -k gencode.v37.annotation.gtf.gz
cat gencode.v37.annotation.gtf | grep '#' > gencode.v37.annotation.sample.gtf
echo '#this is just a sample file' >> gencode.v37.annotation.sample.gtf
cat gencode.v37.annotation.gtf | grep -v '#' | grep ENSG00000288531.1 >> gencode.v37.annotation.sample.gtf
cat gencode.v37.annotation.gtf | grep -v '#' | grep ENSG00000230368.2 >> gencode.v37.annotation.sample.gtf
cat gencode.v37.annotation.gtf | grep -v '#' | grep ENSG00000162571.14 >> gencode.v37.annotation.sample.gtf
cat gencode.v37.annotation.gtf | grep -v '#' | grep ENSG00000186891.14 >> gencode.v37.annotation.sample.gtf
cat gencode.v37.annotation.gtf | grep -v '#' | grep ENSG00000223751.1 >> gencode.v37.annotation.sample.gtf
cat gencode.v37.annotation.gtf | grep -v '#' | grep ENSG00000237667.7 >> gencode.v37.annotation.sample.gtf
cat gencode.v37.annotation.gtf | grep -v '#' | grep ENSG00000143727.16 >> gencode.v37.annotation.sample.gtf
cat gencode.v37.annotation.gtf | grep -v '#' | grep ENSG00000189292.16 >> gencode.v37.annotation.sample.gtf
cat gencode.v37.annotation.gtf | grep -v '#' | grep ENSG00000287140.1 >> gencode.v37.annotation.sample.gtf
cat gencode.v37.annotation.gtf | grep -v '#' | grep ENSG00000234661.2 >> gencode.v37.annotation.sample.gtf
cat gencode.v37.annotation.gtf | grep -v '#' | grep ENSG00000182533.7 >> gencode.v37.annotation.sample.gtf
cat gencode.v37.annotation.gtf | grep -v '#' | grep ENSG00000180914.11 >> gencode.v37.annotation.sample.gtf
bedtools sort -header -i gencode.v37.annotation.sample.gtf | bgzip -c > gencode.v37.annotation.sample.sorted.gtf.gz
rm gencode.v37.annotation.sample.gtf

"""

DIR = os.path.dirname(__file__)


class TestGtfFile(unittest.TestCase):
    def test_gtf_file(self):
        path1 = os.path.join(
            DIR, "data/gencode.v37.annotation.sample.sorted.gtf.gz")
        path2 = os.path.join(
            DIR, "data/gencode.v37.annotation.sample.sorted.gtf.bed")
        path3 = os.path.join(
            DIR, "data/gencode.v37.annotation.sample.sorted.gtf.bed.ref")

        num1 = 0  # All record
        num2 = 0  # Transcript (feature == "transcript")
        num3 = 0  # Gene (feature == "gene")
        with gzip.open(path1, "rt") as f:
            for line in f:
                if line.startswith("#"):
                    continue
                num1 += 1
                values = line.split("\t")
                feature = values[2]
                if feature == "transcript":
                    num2 += 1
                elif feature == "gene":
                    num3 += 1

        # Read all records
        records = []
        with GtfFile(path1) as gtf:
            for record in gtf:
                records.append(record)
        self.assertEqual(num1, len(records))

        # Transcripts
        transcripts = list(GtfTranscriptBuilder(records))
        self.assertEqual(num2, len(transcripts))

        # Genes
        genes = list(GtfGeneBuilder(records))
        self.assertEqual(num3, len(genes))

        # Convert to BED format
        with open(path2, "w+") as fw:
            for transcript in sorted(transcripts, key=lambda item: item.name):
                fw.write(transcript.format("BED") + "\n")
        self.assertTrue(filecmp.cmp(path2, path3))


if __name__ == '__main__':
    unittest.main()
