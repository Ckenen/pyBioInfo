#!/usr/scripts/env python
import os
import gzip
import unittest
import filecmp
from pyBioInfo.IO.File import GffFile, GffRecord, GffTranscript, GffTranscriptBuilder, GffGene, GffGeneBuilder

"""
SAMPLE GENES:

chr1
-------------------
lncRNA
-------------------
ENSG00000288531.1
ENSG00000230368.2
-------------------
protein_coding
-------------------
ENSG00000162571.14
ENSG00000186891.14
-------------------

chr2
-------------------
lncRNA
-------------------
ENSG00000223751.1
ENSG00000237667.7
-------------------
protein_coding
-------------------
ENSG00000143727.16
ENSG00000189292.16
-------------------

chr3
-------------------
lncRNA
-------------------
ENSG00000287140.1
ENSG00000234661.2
-------------------
protein_coding
-------------------
ENSG00000182533.7
ENSG00000180914.11
-------------------

The test GFF file was generated by following commands:

wget ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_37/gencode.v37.annotation.gff3.gz
gunzip -k gencode.v37.annotation.gff3.gz
cat gencode.v37.annotation.gff3 | grep '#' > gencode.v37.annotation.sample.gff3
echo '#this is just a sample file' >> gencode.v37.annotation.sample.gff3
cat gencode.v37.annotation.gff3 | grep -v '#' | grep ENSG00000288531.1 >> gencode.v37.annotation.sample.gff3
cat gencode.v37.annotation.gff3 | grep -v '#' | grep ENSG00000230368.2 >> gencode.v37.annotation.sample.gff3
cat gencode.v37.annotation.gff3 | grep -v '#' | grep ENSG00000162571.14 >> gencode.v37.annotation.sample.gff3
cat gencode.v37.annotation.gff3 | grep -v '#' | grep ENSG00000186891.14 >> gencode.v37.annotation.sample.gff3
cat gencode.v37.annotation.gff3 | grep -v '#' | grep ENSG00000223751.1 >> gencode.v37.annotation.sample.gff3
cat gencode.v37.annotation.gff3 | grep -v '#' | grep ENSG00000237667.7 >> gencode.v37.annotation.sample.gff3
cat gencode.v37.annotation.gff3 | grep -v '#' | grep ENSG00000143727.16 >> gencode.v37.annotation.sample.gff3
cat gencode.v37.annotation.gff3 | grep -v '#' | grep ENSG00000189292.16 >> gencode.v37.annotation.sample.gff3
cat gencode.v37.annotation.gff3 | grep -v '#' | grep ENSG00000287140.1 >> gencode.v37.annotation.sample.gff3
cat gencode.v37.annotation.gff3 | grep -v '#' | grep ENSG00000234661.2 >> gencode.v37.annotation.sample.gff3
cat gencode.v37.annotation.gff3 | grep -v '#' | grep ENSG00000182533.7 >> gencode.v37.annotation.sample.gff3
cat gencode.v37.annotation.gff3 | grep -v '#' | grep ENSG00000180914.11 >> gencode.v37.annotation.sample.gff3
bedtools sort -header -i gencode.v37.annotation.sample.gff3 | bgzip -c > gencode.v37.annotation.sample.sorted.gff3.gz
rm gencode.v37.annotation.sample.gff3

"""

DIR = os.path.dirname(__file__)


class TestGffFile(unittest.TestCase):
    def test_gff_file(self):
        path1 = os.path.join(
            DIR, "data/gencode.v37.annotation.sample.sorted.gff3.gz")
        path2 = os.path.join(
            DIR, "data/gencode.v37.annotation.sample.sorted.gff3.bed")
        path3 = os.path.join(
            DIR, "data/gencode.v37.annotation.sample.sorted.gff3.bed.ref")

        num1 = 0  # All record
        num2 = 0  # Transcript (feature == "transcript")
        num3 = 0  # Gene (feature == "gene")
        with gzip.open(path1, "rt") as f:
            for line in f:
                if line.startswith("#"):
                    continue
                num1 += 1
                values = line.split("\t")
                feature = values[2]
                if feature == "transcript":
                    num2 += 1
                elif feature == "gene":
                    num3 += 1

        # Read all records
        records = []
        with GffFile(path1) as gff:
            for record in gff:
                records.append(record)
        self.assertEqual(num1, len(records))

        # Build Transcripts
        transcripts = list(GffTranscriptBuilder(records))
        self.assertEqual(num2, len(transcripts))
        for i in range(len(transcripts) - 1):
            assert transcripts[i] <= transcripts[i + 1]

        # Genes
        genes = list(GffGeneBuilder(records))
        self.assertEqual(num3, len(genes))
        for i in range(len(genes) - 1):
            assert genes[i] <= genes[i + 1]

        # Convert to BED format
        with open(path2, "w+") as fw:
            # When the chrom, start and end of two transcripts are exactly the 
            # same, their order cannot be guaranteed, so they are sorted 
            # according to their names
            for transcript in sorted(transcripts, key=lambda item: item.name):
                fw.write(transcript.format("BED") + "\n")
        self.assertTrue(filecmp.cmp(path2, path3))


if __name__ == '__main__':
    unittest.main()
